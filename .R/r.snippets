snippet lib
	library(${1:package})

snippet req
	require(${1:package})

snippet src
	source("${1:file.R}")

snippet ret
	return(${1:code})

snippet mat
	matrix(${1:data}, nrow = ${2:rows}, ncol = ${3:cols})

snippet sg
	setGeneric("${1:generic}", function(${2:x, ...}) {
		standardGeneric("${1:generic}")
	})

snippet sm
	setMethod("${1:generic}", ${2:class}, function(${2:x, ...}) {
		${0}
	})

snippet sc
	setClass("${1:Class}", slots = c(${2:name = "type"}))

snippet if
	if (${1:condition}) {
		${0}
	}

snippet el
	else {
		${0}
	}

snippet ei
	else if (${1:condition}) {
		${0}
	}

snippet fun
	${1:name} <- function(${2:variables}) {
		${0}
	}

snippet for
	for (${1:variable} in ${2:vector}) {
		${0}
	}

snippet while
	while (${1:condition}) {
		${0}
	}

snippet switch
	switch (${1:object},
		${2:case} = ${3:action}
	)

snippet apply
	apply(${1:array}, ${2:margin}, ${3:...})

snippet lapply
	lapply(${1:list}, ${2:function})

snippet sapply
	sapply(${1:list}, ${2:function})

snippet mapply
	mapply(${1:function}, ${2:...})

snippet tapply
	tapply(${1:vector}, ${2:index}, ${3:function})

snippet vapply
	vapply(${1:list}, ${2:function}, FUN.VALUE = ${3:type}, ${4:...})

snippet rapply
	rapply(${1:list}, ${2:function})

snippet ts
	`r paste("#", date(), "------------------------------\n")`

snippet shinyapp
	library(shiny)

	ui <- fluidPage(
	  ${0}
	)

	server <- function(input, output, session) {

	}

	shinyApp(ui, server)

snippet shinymod
	${1:name}_UI <- function(id) {
	  ns <- NS(id)
	  tagList(
		${0}
	  )
	}

	${1:name} <- function(input, output, session) {

	}

# custom ----------------------------------------------------------------------------

snippet edit_rprofile
	usethis::edit_r_profile(scope = "user")

snippet edit_renviron
	usethis::edit_r_environ(scope = "user")

snippet edit_snippets_cpp
	usethis::edit_rstudio_snippets(type = "c_cpp")

snippet edit_snippets_css
	usethis::edit_rstudio_snippets(type = "css")

snippet edit_snippets_html
	usethis::edit_rstudio_snippets(type = "html")

snippet edit_snippets_js
	usethis::edit_rstudio_snippets(type = "javascript")

snippet edit_snippets_md
	usethis::edit_rstudio_snippets(type = "markdown")

snippet edit_snippets_py
	usethis::edit_rstudio_snippets(type = "python")

snippet edit_snippets_r
	usethis::edit_rstudio_snippets(type = "R")

snippet edit_snippets_sql
	usethis::edit_rstudio_snippets(type = "sql")

snippet edit_snippets_stan
	usethis::edit_rstudio_snippets(type = "stan")

snippet edit_snippets_tex
	usethis::edit_rstudio_snippets(type = "tex")

snippet tidy_description
	usethis::use_tidy_description()
	usethis::use_tidy_versions(overwrite = FALSE, source = "local")

snippet check_package_no_tests
	devtools::check(args = "--no-tests")

snippet library_favourites
	suppressPackageStartupMessages({
		library(fs)
		library(magrittr)
		library(tidyverse)
	})

snippet install_first
	pkgs = c(
		"devtools",
		"roxygen2",
		"tidyverse",
		"usethis",
		"kableExtra",
		"shiny",
		"shinyjs",
		"tidymodels",
		character(0)
	)
	for(pkg in pkgs){
		if(!pkg %in% rownames(installed.packages(.libPaths()[1]))){
			message(pkg)
			install.packages(pkg, .libPaths()[1], quiet = TRUE)
		}
	}

snippet roxy_skeleton
	# @rdname TODO
	# @name ${1:function_name}
	#' @title TODO
	#' @description TODO
	#' @param x [TODO] TODO
	# @details TODO
	# @importFrom TODO TODO
	# @export
	# @example inst/examples/example-${1:function_name}.R
	#' @examples
	#' \dontrun{
	#'
	#' # TODO
	#' }

snippet roxy_describe
	#' \describe{
	#'   \item{one}{
	#'     asdf
	#'   }
	#'   \item{two}{
	#'     asdf
	#'   }
	#' }

snippet roxy_itemize
	#' \itemize{
	#'   \item First item
	#'   \item Second item
	#' }

snippet roxy_enumerate
	#' \enumerate{
	#'   \item First item
	#'   \item Second item
	#' }

snippet roxy_table2
	#' \tabular{ll}{
	#'   \strong{asdf} \tab \strong{asdf} \cr
	#'   asdf \tab asdf \cr
	#' }

snippet roxy_table3
	#' \tabular{lll}{
	#'   \strong{asdf} \tab \strong{asdf} \tab \strong{asdf} \cr
	#'   asdf \tab asdf \tab asdf \cr
	#' }

snippet bootstrap_colours
	list(
		bootstrap_blue 				= "#428bca",
		bootstrap_green 			= "#5cb85c",
		bootstrap_lightblue 		= "#5bc0de",
		bootstrap_red 				= "#d9534f",
		bootstrap_white 			= "#f9f9f9",
		bootstrap_button_blue 		= "#337ab7",
		bootstrap_button_green 		= "#5cb85c",
		bootstrap_button_lightblue 	= "#5bc0de",
		bootstrap_button_orange 	= "#f0ad4e"
	)

snippet active_dir
	fs::path_dir(rstudioapi::getActiveDocumentContext()$path)
